{"version":3,"file":"static/js/501.9b1fa19f.chunk.js","mappings":"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","sources":["../node_modules/@metamask/detect-provider/src/index.ts","../node_modules/@web3auth/base-evm-adapter/src/baseEvmAdapter.ts","../node_modules/@web3auth/metamask-adapter/src/metamaskAdapter.ts"],"sourcesContent":["interface MetaMaskEthereumProvider {\n  isMetaMask?: boolean;\n  once(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  on(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  off(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  addListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  removeListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  removeAllListeners(event?: string | symbol): this;\n}\n\ninterface Window {\n  ethereum?: MetaMaskEthereumProvider;\n}\n\nexport = detectEthereumProvider;\n\n/**\n * Returns a Promise that resolves to the value of window.ethereum if it is\n * set within the given timeout, or null.\n * The Promise will not reject, but an error will be thrown if invalid options\n * are provided.\n *\n * @param options - Options bag.\n * @param options.mustBeMetaMask - Whether to only look for MetaMask providers.\n * Default: false\n * @param options.silent - Whether to silence console errors. Does not affect\n * thrown errors. Default: false\n * @param options.timeout - Milliseconds to wait for 'ethereum#initialized' to\n * be dispatched. Default: 3000\n * @returns A Promise that resolves with the Provider if it is detected within\n * given timeout, otherwise null.\n */\nfunction detectEthereumProvider<T = MetaMaskEthereumProvider>({\n  mustBeMetaMask = false,\n  silent = false,\n  timeout = 3000,\n} = {}): Promise<T | null> {\n\n  _validateInputs();\n\n  let handled = false;\n\n  return new Promise((resolve) => {\n    if ((window as Window).ethereum) {\n\n      handleEthereum();\n\n    } else {\n\n      window.addEventListener(\n        'ethereum#initialized',\n        handleEthereum,\n        { once: true },\n      );\n\n      setTimeout(() => {\n        handleEthereum();\n      }, timeout);\n    }\n\n    function handleEthereum() {\n\n      if (handled) {\n        return;\n      }\n      handled = true;\n\n      window.removeEventListener('ethereum#initialized', handleEthereum);\n\n      const { ethereum } = window as Window;\n\n      if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {\n        resolve(ethereum as unknown as T);\n      } else {\n\n        const message = mustBeMetaMask && ethereum\n          ? 'Non-MetaMask window.ethereum detected.'\n          : 'Unable to detect window.ethereum.';\n\n        !silent && console.error('@metamask/detect-provider:', message);\n        resolve(null);\n      }\n    }\n  });\n\n  function _validateInputs() {\n    if (typeof mustBeMetaMask !== 'boolean') {\n      throw new Error(`@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.`);\n    }\n    if (typeof silent !== 'boolean') {\n      throw new Error(`@metamask/detect-provider: Expected option 'silent' to be a boolean.`);\n    }\n    if (typeof timeout !== 'number') {\n      throw new Error(`@metamask/detect-provider: Expected option 'timeout' to be a number.`);\n    }\n  }\n}\n","import {\n  ADAPTER_EVENTS,\n  ADAPTER_STATUS,\n  AdapterInitOptions,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  checkIfTokenIsExpired,\n  clearToken,\n  getChainConfig,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\n\nexport abstract class BaseEvmAdapter<T> extends BaseAdapter<T> {\n  async init(_?: AdapterInitOptions): Promise<void> {\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n  }\n\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError();\n    const { chainNamespace, chainId } = this.chainConfig;\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n\n      const signedMessage = await this.provider.request<string>({\n        method: \"personal_sign\",\n        params: [challenge, accounts[0]],\n      });\n\n      const idToken = await verifySignedChallenge(\n        chainNamespace,\n        signedMessage as string,\n        challenge,\n        this.name,\n        this.sessionTime,\n        this.clientId,\n        this.web3AuthNetwork\n      );\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnectSession(): Promise<void> {\n    super.checkDisconnectionRequirements();\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n}\n","import detectEthereumProvider from \"@metamask/detect-provider\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport { BaseEvmAdapter } from \"@web3auth/base-evm-adapter\";\n\ninterface EthereumProvider extends SafeEventEmitterProvider {\n  isMetaMask?: boolean;\n  isConnected: () => boolean;\n  chainId: string;\n}\nexport type MetamaskAdapterOptions = BaseAdapterSettings;\n\nclass MetamaskAdapter extends BaseEvmAdapter<void> {\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  readonly name: string = WALLET_ADAPTERS.METAMASK;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  private metamaskProvider: EthereumProvider | null = null;\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider as SafeEventEmitterProvider;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions = {}): Promise<void> {\n    await super.init(options);\n    super.checkInitializationRequirements();\n    this.metamaskProvider = (await detectEthereumProvider({ mustBeMetaMask: true })) as EthereumProvider;\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n    try {\n      log.debug(\"initializing metamask adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.METAMASK });\n    try {\n      await this.metamaskProvider.request({ method: \"eth_requestAccounts\" });\n      const { chainId } = this.metamaskProvider;\n      if (chainId !== (this.chainConfig as CustomChainConfig).chainId) {\n        await this.switchChain(this.chainConfig as CustomChainConfig);\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.METAMASK, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnectSession();\n    this.provider?.removeAllListeners();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    await super.disconnect();\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  private async switchChain(chainConfig: CustomChainConfig): Promise<void> {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: chainConfig.chainId }],\n      });\n    } catch (switchError: unknown) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if ((switchError as { code: number }).code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [\n            {\n              chainId: chainConfig.chainId,\n              chainName: chainConfig.displayName,\n              rpcUrls: [chainConfig.rpcTarget],\n              blockExplorerUrls: [chainConfig.blockExplorer],\n              nativeCurrency: {\n                name: chainConfig.tickerName,\n                symbol: chainConfig.ticker,\n                decimals: chainConfig.decimals || 18,\n              },\n            },\n          ],\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n}\n\nexport { MetamaskAdapter };\n"],"names":["module","mustBeMetaMask","silent","timeout","Error","_validateInputs","handled","Promise","resolve","handleEthereum","window","removeEventListener","ethereum","isMetaMask","message","console","error","addEventListener","once","setTimeout","BaseEvmAdapter","BaseAdapter","async","_","this","chainConfig","getChainConfig","CHAIN_NAMESPACES","provider","status","ADAPTER_STATUS","WalletLoginError","chainNamespace","chainId","accounts","request","method","length","existingToken","getSavedToken","name","checkIfTokenIsExpired","idToken","payload","domain","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","challenge","signChallenge","signedMessage","params","verifySignedChallenge","sessionTime","clientId","web3AuthNetwork","saveToken","super","checkDisconnectionRequirements","clearToken","rehydrated","emit","ADAPTER_EVENTS","MetamaskAdapter","constructor","_defineProperty","ADAPTER_NAMESPACES","ADAPTER_CATEGORY","WALLET_ADAPTERS","metamaskProvider","options","arguments","init","checkInitializationRequirements","detectEthereumProvider","WalletInitializationError","log","autoConnect","connect","checkConnectionRequirements","adapter","switchChain","disconnect","reconnected","cleanup","disconnectSession","removeAllListeners","switchError","code","chainName","displayName","rpcUrls","rpcTarget","blockExplorerUrls","blockExplorer","nativeCurrency","tickerName","symbol","ticker","decimals"],"sourceRoot":""}